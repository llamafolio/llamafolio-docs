"use strict";(self.webpackChunkllamafolio_docs=self.webpackChunkllamafolio_docs||[]).push([[186],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),f=r,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},91477:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={title:"Adapter interface",sidebar_position:3},i=void 0,s={unversionedId:"interface",id:"interface",title:"Adapter interface",description:"Metadata",source:"@site/docs/interface.md",sourceDirName:".",slug:"/interface",permalink:"/docs/interface",draft:!1,editUrl:"https://github.com/llamafolio/llamafolio-docs/tree/master/docs/interface.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Adapter interface",sidebar_position:3},sidebar:"sidebar",previous:{title:"Installation",permalink:"/docs/installation"}},c={},l=[{value:"Metadata",id:"metadata",level:2}],p={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"metadata"},"Metadata"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The protocol should be listed on DefiLlama before LlamaFolio."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://docs.llama.fi/list-your-project/submit-a-project"},"https://docs.llama.fi/list-your-project/submit-a-project"))),(0,r.kt)("p",null,"These types are exported in ",(0,r.kt)("inlineCode",{parentName:"p"},"@lib/adapter"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Adapter extends Partial<Record<Chain, AdapterHandler>> {\n  /**\n   * DefiLlama slug\n   */\n  id: string;\n}\n")),(0,r.kt)("h1",{id:"context"},"Context"),(0,r.kt)("p",null,"Context is passed through the app and contain info about the current adapter / chain as well as the block height."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface BaseContext {\n  chain: Chain;\n  adapterId: string;\n  blockHeight?: number;\n}\n")),(0,r.kt)("p",null,"When retrieving balances, the context also contains the current user address."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export interface BalancesContext extends BaseContext {\n  address: `0x${string}`;\n}\n")),(0,r.kt)("h1",{id:"contracts"},"Contracts"),(0,r.kt)("p",null,"List the contracts defined in your protocol: they will be used later to retrieve the account positions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface AdapterHandler {\n  getContracts: GetContractsHandler;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ContractsMap {\n  [key: string]: Contract | Contract[] | RawContract | RawContract[];\n}\n\ninterface ContractsConfig<C extends ContractsMap> {\n  contracts: C\n  revalidate?: number\n  revalidateProps?: { [key: string]: any }\n}\n\n/**\n * RawContract is automatically mapped to Contract\n */\ntype ExcludeRawContract<T> = {\n  [P in keyof T]: Exclude<T[P], RawContract | RawContract[]>;\n};\n\n/**\n * Pass previous `revalidateProps` passed to `getContracts` handler to know where the previous revalidate process ended.\n */\ntype GetContractsHandler<C extends ContractsMap = ContractsMap> = (\n  ctx: BaseContext,\n  revalidateProps: { [key: string]: any },\n) => ContractsConfig<C> | Promise<ContractsConfig<C>>;\n")),(0,r.kt)("p",null,"Contract definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'type Category =\n  | "wallet"\n  | "lend"\n  | "borrow"\n  | "stake"\n  | "vest"\n  | "lock"\n  | "lp"\n  | "farm"\n  | "reward";\n\ntype ContractStandard = "erc20" | "erc721";\n\ninterface BaseContract {\n  // discriminators\n  standard?: ContractStandard;\n  category?: Category;\n\n  name?: string;\n  displayName?: string;\n  chain: Chain;\n  address: `0x${string}`;\n  symbol?: string;\n  decimals?: number;\n  stable?: boolean;\n\n  // DefiLlama yields API identifier. Matches pool or pool_old\n  yieldKey?: string;\n}\n')),(0,r.kt)("h1",{id:"balances"},"Balances"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Adapter {\n  // ...\n  getBalances: (\n    ctx: BaseContext,\n    contracts: BaseContract[]\n  ) => BalancesConfig | Promise<BalancesConfig>;\n}\n\nexport interface BaseBalance extends BaseContract {\n  amount: bigint;\n}\n\nexport interface Balance extends BaseBalance {\n  // optional rewards\n  rewards?: BaseBalance[];\n  // optional underlying tokens.\n  // ex: aToken -> token (AAVE)\n  // ex: Uniswap Pair -> [token0, token1]\n  underlyings?: BaseBalance[];\n}\n\nexport type BalancesConfig = {\n  balances: Balance[];\n  revalidate?: number;\n};\n")))}d.isMDXComponent=!0}}]);